let e=document.createElement("style");e.innerHTML=".mt-4[data-v-3d8f6c53]{margin-top:20px}",document.head.appendChild(e);import{g as l,q as o,o as n,c,a as t,b as a,F as d,r,j as u,w as s,d as i,m as h,t as b,h as m}from"./index.6e1d6788.js";var p=l({__name:"CheckboxBasic",setup(e){const l=o(!0),u=o(!1),s=o(!1),i=o(!1),h=o(!1),b=o(!1);return(e,o)=>{const m=r("ht-checkbox");return n(),c(d,null,[t("div",null,[a(m,{modelValue:l.value,"onUpdate:modelValue":o[0]||(o[0]=e=>l.value=e),label:"Option 1",size:"large"},null,8,["modelValue"]),a(m,{modelValue:u.value,"onUpdate:modelValue":o[1]||(o[1]=e=>u.value=e),label:"Option 2",size:"large"},null,8,["modelValue"])]),t("div",null,[a(m,{modelValue:s.value,"onUpdate:modelValue":o[2]||(o[2]=e=>s.value=e),label:"Option 1"},null,8,["modelValue"]),a(m,{modelValue:i.value,"onUpdate:modelValue":o[3]||(o[3]=e=>i.value=e),label:"Option 2"},null,8,["modelValue"])]),t("div",null,[a(m,{modelValue:h.value,"onUpdate:modelValue":o[4]||(o[4]=e=>h.value=e),label:"Option 1",size:"small"},null,8,["modelValue"]),a(m,{modelValue:b.value,"onUpdate:modelValue":o[5]||(o[5]=e=>b.value=e),label:"Option 2",size:"small"},null,8,["modelValue"])]),t("div",null,[a(m,{modelValue:h.value,"onUpdate:modelValue":o[6]||(o[6]=e=>h.value=e),label:"Option 1",size:"small",disabled:""},null,8,["modelValue"]),a(m,{modelValue:b.value,"onUpdate:modelValue":o[7]||(o[7]=e=>b.value=e),label:"Option 2",size:"small",disabled:""},null,8,["modelValue"])])],64)}}});function k(e){e.__sourceCode='<template>\r\n  <div>\r\n    <ht-checkbox v-model="checked1" label="Option 1" size="large" />\r\n    <ht-checkbox v-model="checked2" label="Option 2" size="large" />\r\n  </div>\r\n  <div>\r\n    <ht-checkbox v-model="checked3" label="Option 1" />\r\n    <ht-checkbox v-model="checked4" label="Option 2" />\r\n  </div>\r\n  <div>\r\n    <ht-checkbox v-model="checked5" label="Option 1" size="small" />\r\n    <ht-checkbox v-model="checked6" label="Option 2" size="small" />\r\n  </div>\r\n  <div>\r\n    <ht-checkbox v-model="checked5" label="Option 1" size="small" disabled />\r\n    <ht-checkbox v-model="checked6" label="Option 2" size="small" disabled />\r\n  </div>\r\n</template>\r\n\r\n<script lang="ts" setup>\r\nimport { ref } from \'vue\'\r\n\r\nconst checked1 = ref(true)\r\nconst checked2 = ref(false)\r\nconst checked3 = ref(false)\r\nconst checked4 = ref(false)\r\nconst checked5 = ref(false)\r\nconst checked6 = ref(false)\r\n<\/script>',e.__sourceCodeTitle=" 基础用法 "}k(p);const v=t("p",{class:"row"}," 单独使用可以表示两种状态之间的切换，写在标签中的内容为 checkbox 按钮后的介绍 ",-1),x=t("p",{class:"row"},[t("code",null,"checkbox-group"),i(" 元素能把多个 checkbox 管理为一组，只需要在 Group 中使用 "),t("code",null,"v-model"),i(" 绑定 "),t("code",null,"Array"),i(" 类型的变量即可。 只有一个选项时的默认值类型为 "),t("code",null,"Boolean"),i(" ，当选中时值为"),t("code",null,"true"),i(" 。"),t("code",null,"el-checkbox"),i(" 标签中的内容将成为复选框按钮之后的描述。 ")],-1);const f={render:function(e,l){const o=r("desc-component");return n(),u(o,null,{default:s((()=>[v,x])),_:1})}},g=t("p",{class:"row"},"多选框不可用状态。",-1),C=t("p",{class:"row"},[i("设置 "),t("code",null,"disabled"),i(" 属性即可。")],-1);const V={render:function(e,l){const o=r("desc-component");return n(),u(o,null,{default:s((()=>[g,C])),_:1})}};var _=l({__name:"CheckboxDisabled",setup(e){const l=o(!1),t=o(!0);return(e,o)=>{const u=r("ht-checkbox");return n(),c(d,null,[a(u,{modelValue:l.value,"onUpdate:modelValue":o[0]||(o[0]=e=>l.value=e),disabled:""},{default:s((()=>[i("Disabled")])),_:1},8,["modelValue"]),a(u,{modelValue:t.value,"onUpdate:modelValue":o[1]||(o[1]=e=>t.value=e)},{default:s((()=>[i("Not disabled")])),_:1},8,["modelValue"])],64)}}});function O(e){e.__sourceCode='<template>\r\n  <ht-checkbox v-model="checked1" disabled>Disabled</ht-checkbox>\r\n  <ht-checkbox v-model="checked2">Not disabled</ht-checkbox>\r\n</template>\r\n\r\n<script lang="ts" setup>\r\nimport { ref } from \'vue\'\r\nconst checked1 = ref(false)\r\nconst checked2 = ref(true)\r\n<\/script>',e.__sourceCodeTitle=" 禁用状态 "}O(_);var z=l({__name:"CheckboxGroupBasic",setup(e){const l=o(["selected and disabled","Option A"]);return(e,o)=>{const c=r("ht-checkbox"),t=r("ht-checkbox-group");return n(),u(t,{modelValue:l.value,"onUpdate:modelValue":o[0]||(o[0]=e=>l.value=e)},{default:s((()=>[a(c,{label:"Option A"}),a(c,{label:"Option B"}),a(c,{label:"Option C"}),a(c,{label:"disabled",disabled:""}),a(c,{label:"selected and disabled",disabled:""})])),_:1},8,["modelValue"])}}});function y(e){e.__sourceCode='<template>\r\n  <ht-checkbox-group v-model="checkList">\r\n    <ht-checkbox label="Option A" />\r\n    <ht-checkbox label="Option B" />\r\n    <ht-checkbox label="Option C" />\r\n    <ht-checkbox label="disabled" disabled />\r\n    <ht-checkbox label="selected and disabled" disabled />\r\n  </ht-checkbox-group>\r\n</template>\r\n\r\n<script lang="ts" setup>\r\nimport { ref } from \'vue\'\r\n\r\nconst checkList = ref([\'selected and disabled\', \'Option A\'])\r\n<\/script>',e.__sourceCodeTitle=" 多选框组 "}y(z);const U=t("p",{class:"row"}," 适用于多个勾选框绑定到同一个数组的情景，通过是否勾选来表示这一组选项中选中的项。 ",-1),A=t("p",{class:"row"},[i(" 在 "),t("code",null,"ht-checkbox"),i(" 元素中定义 "),t("code",null,"v-model"),i(" 绑定变量，单一的 "),t("code",null,"checkbox"),i(" 中，默认绑定变量的值会是 "),t("code",null,"Boolean"),i(" ，选中为 "),t("code",null,"true"),i(" 。 在 "),t("code",null,"ht-checkbox"),i(" 组件中， "),t("code",null,"label"),i(" 是选择框的值。 如果该组件下没有被传入内容，那么 "),t("code",null,"label"),i(" 将会作为 "),t("code",null,"checkbox"),i(" 按钮后的介绍。 "),t("code",null,"label"),i(" 也与数组中的元素值相对应。 如果指定的值存在于数组中，就处于选择状态，反之亦然。 ")],-1);const B={render:function(e,l){const o=r("desc-component");return n(),u(o,null,{default:s((()=>[U,A])),_:1})}};var S=l({__name:"CheckboxNum",setup(e){const l=o(["Shanghai","Beijing"]),t=["Shanghai","Beijing","Guangzhou","Shenzhen"];return(e,o)=>{const m=r("ht-checkbox"),p=r("ht-checkbox-group");return n(),u(p,{modelValue:l.value,"onUpdate:modelValue":o[0]||(o[0]=e=>l.value=e),min:1,max:2},{default:s((()=>[(n(),c(d,null,h(t,(e=>a(m,{key:e,label:e},{default:s((()=>[i(b(e),1)])),_:2},1032,["label"]))),64))])),_:1},8,["modelValue"])}}});function G(e){e.__sourceCode="<template>\r\n  <ht-checkbox-group v-model=\"checkedCities\" :min=\"1\" :max=\"2\">\r\n    <ht-checkbox v-for=\"city in cities\" :key=\"city\" :label=\"city\">{{\r\n      city\r\n    }}</ht-checkbox>\r\n  </ht-checkbox-group>\r\n</template>\r\n\r\n<script lang=\"ts\" setup>\r\nimport { ref } from 'vue'\r\n\r\nconst checkedCities = ref(['Shanghai', 'Beijing'])\r\nconst cities = ['Shanghai', 'Beijing', 'Guangzhou', 'Shenzhen']\r\n<\/script>",e.__sourceCodeTitle=" 可选项目数量的限制 "}G(S);const D=t("p",{class:"row"},[i(" 使用 "),t("code",null,"min"),i(" 和 "),t("code",null,"max"),i(" 属性能够限制可以被勾选的项目的数量。 ")],-1);const j={render:function(e,l){const o=r("desc-component");return n(),u(o,null,{default:s((()=>[D])),_:1})}};var w=l({__name:"CheckboxAll",setup(e){const l=o(!1),t=o(!0),u=o(["Shanghai","Beijing"]),m=["Shanghai","Beijing","Guangzhou","Shenzhen"],p=e=>{u.value=e?m:[],t.value=!1},k=e=>{const o=e.length;l.value=o===m.length,t.value=o>0&&m.length>o};return(e,o)=>{const v=r("ht-checkbox"),x=r("ht-checkbox-group");return n(),c(d,null,[a(v,{modelValue:l.value,"onUpdate:modelValue":o[0]||(o[0]=e=>l.value=e),indeterminate:t.value,onChange:p},{default:s((()=>[i("Check all")])),_:1},8,["modelValue","indeterminate"]),a(x,{modelValue:u.value,"onUpdate:modelValue":o[1]||(o[1]=e=>u.value=e),onChange:k},{default:s((()=>[(n(),c(d,null,h(m,(e=>a(v,{key:e,label:e},{default:s((()=>[i(b(e),1)])),_:2},1032,["label"]))),64))])),_:1},8,["modelValue"])],64)}}});function T(e){e.__sourceCode='<template>\r\n  <ht-checkbox\r\n    v-model="checkAll"\r\n    :indeterminate="isIndeterminate"\r\n    @change="handleCheckAllChange"\r\n    >Check all</ht-checkbox\r\n  >\r\n  <ht-checkbox-group\r\n    v-model="checkedCities"\r\n    @change="handleCheckedCitiesChange"\r\n  >\r\n    <ht-checkbox v-for="city in cities" :key="city" :label="city">{{\r\n      city\r\n    }}</ht-checkbox>\r\n  </ht-checkbox-group>\r\n</template>\r\n\r\n\r\n<script lang="ts" setup>\r\nimport {ref} from \'vue\'\r\nconst checkAll = ref(false)\r\nconst isIndeterminate = ref(true)\r\nconst checkedCities = ref([\'Shanghai\', \'Beijing\'])\r\nconst cities = [\'Shanghai\', \'Beijing\', \'Guangzhou\', \'Shenzhen\']\r\nconst handleCheckAllChange = (val: boolean) => {\r\n  checkedCities.value = val ? cities : []\r\n  isIndeterminate.value = false\r\n}\r\nconst handleCheckedCitiesChange = (value: string[]) => {\r\n  const checkedCount = value.length;\r\n  checkAll.value = checkedCount === cities.length;\r\n  isIndeterminate.value = checkedCount > 0 &&  cities.length > checkedCount  \r\n}\r\n<\/script>',e.__sourceCodeTitle=" 中间状态 "}T(w);const I=t("p",{class:"row"},[t("code",null,"indeterminate"),i(" 属性用以表示 checkbox 的不确定状态，一般用于实现全选的效果 ")],-1);const E={render:function(e,l){const o=r("desc-component");return n(),u(o,null,{default:s((()=>[I])),_:1})}},L={class:"mt-4"},N={class:"mt-4"},F={class:"mt-4"};var q=l({__name:"CheckboxBorder",setup(e){const l=o(!0),u=o(!1),i=o(!1),h=o(!0),b=o(["Option1"]);return(e,o)=>{const m=r("ht-checkbox"),p=r("ht-checkbox-group");return n(),c(d,null,[t("div",null,[a(m,{modelValue:l.value,"onUpdate:modelValue":o[0]||(o[0]=e=>l.value=e),label:"Option1",size:"large",border:""},null,8,["modelValue"]),a(m,{modelValue:u.value,"onUpdate:modelValue":o[1]||(o[1]=e=>u.value=e),label:"Option2",size:"large",border:""},null,8,["modelValue"])]),t("div",L,[a(m,{modelValue:i.value,"onUpdate:modelValue":o[2]||(o[2]=e=>i.value=e),label:"Option1",border:""},null,8,["modelValue"]),a(m,{modelValue:h.value,"onUpdate:modelValue":o[3]||(o[3]=e=>h.value=e),label:"Option2",border:""},null,8,["modelValue"])]),t("div",N,[a(p,{modelValue:b.value,"onUpdate:modelValue":o[4]||(o[4]=e=>b.value=e),size:"small"},{default:s((()=>[a(m,{label:"Option1",border:""}),a(m,{label:"Option2",border:""})])),_:1},8,["modelValue"])]),t("div",F,[a(p,{modelValue:b.value,"onUpdate:modelValue":o[5]||(o[5]=e=>b.value=e),size:"small"},{default:s((()=>[a(m,{label:"Option1",border:"",disabled:""}),a(m,{label:"Option2",border:"",disabled:""})])),_:1},8,["modelValue"])])],64)}}});function H(e){e.__sourceCode='<template>\r\n  <div>\r\n    <ht-checkbox v-model="checked1" label="Option1" size="large" border />\r\n    <ht-checkbox v-model="checked2" label="Option2" size="large" border />\r\n  </div>\r\n  <div class="mt-4">\r\n    <ht-checkbox v-model="checked3" label="Option1" border />\r\n    <ht-checkbox v-model="checked4" label="Option2" border />\r\n  </div>\r\n  <div class="mt-4">\r\n    <ht-checkbox-group v-model="checkboxGroup1" size="small">\r\n      <ht-checkbox label="Option1" border />\r\n      <ht-checkbox label="Option2" border />\r\n    </ht-checkbox-group>\r\n  </div>\r\n  <div class="mt-4">\r\n    <ht-checkbox-group v-model="checkboxGroup1" size="small">\r\n      <ht-checkbox label="Option1" border disabled />\r\n      <ht-checkbox label="Option2" border disabled />\r\n    </ht-checkbox-group>\r\n  </div>\r\n</template>\r\n\r\n<script lang="ts" setup>\r\nimport { ref } from \'vue\'\r\n\r\nconst checked1 = ref(true)\r\nconst checked2 = ref(false)\r\nconst checked3 = ref(false)\r\nconst checked4 = ref(true)\r\nconst checkboxGroup1 = ref([\'Option1\'])\r\n<\/script>\r\n<style scoped>\r\n.mt-4{\r\n  margin-top: 20px;\r\n}\r\n</style>',e.__sourceCodeTitle=" 带有边框 "}H(q),q.__scopeId="data-v-3d8f6c53";const M=t("p",{class:"row"},[i("设置"),t("code",null,"border"),i(" 属性可以渲染为带有边框的多选框。")],-1);const J={render:function(e,l){const o=r("desc-component");return n(),u(o,null,{default:s((()=>[M])),_:1})}},K=t("h1",null,"Checkbox多选框",-1);var P=l({__name:"CheckboxDemo",setup(e){const l=["属性名","说明","类型","默认值"],o=[["v-model","选中项绑定值","<code>string</code> | <code>number</code> | <code>boolean</code>",""],["label","选中状态的值（只有在<code>checkbox-group</code> 或者绑定对象类型为<code>array</code>时有效）","<code>string</code> |<code>number</code>  |<code>boolean</code> ",""],["true-label","选中时的值","<code>string</code> |<code>number</code>",""],["false-label","没有选中时的值","<code>string</code>|<code>number</code>",""],["disabled","是否禁用","<code>boolean</code>",!1],["border","是否显示边框","boolean",!1],["size","Checkbox 的尺寸","'large' | 'default' | 'small'",""],["name","\t原生 name 属性","<code>string</code>",""],["checked","\t当前是否勾选","<code>boolean</code>",!1],["indeterminate","\t设置不确定状态，仅负责样式控制","<code>boolean</code>",!1],["tabindex","\t输入框的 tabindex","<code>string</code>|<code>number</code>",""],["id","\tinput id","<code>string</code>",""]],t=["事件名","说明","类型"],u=[["cahnge","当绑定值变化时触发的事件","Function"]],s=["插槽名","说明"],i=[["default","自定义默认内容"]],h=["属性名","说明","类型","默认值"],b=[["v-model","绑定值","<code>Array</code>","[]"],["size","\t多选框组尺寸","<code>'large' | 'default' | 'small'</code> ",""],["disabled","\t是否禁用","<code>boolean</code>",!1],["min","可被勾选的 checkbox 的最小数量","<code>number</code>",""],["max","可被勾选的 checkbox 的最大数量","<code>number</code>",""]],k=["插槽名","说明","子标签"],v=[["default","自定义默认内容","Checkbox"]];return(e,x)=>{const g=r("Demo"),C=r("Api");return n(),c(d,null,[K,m(" 基本使用 "),a(g,{component:p,descComponent:f}),m(" 禁用状态 "),a(g,{component:_,descComponent:V}),m(" 多选框组 "),a(g,{component:z,descComponent:B}),m(" 可选项目数量的限制 "),a(g,{component:S,descComponent:j}),m(" 全选 "),a(g,{component:w,descComponent:E}),m(" 带有边框 "),a(g,{component:q,descComponent:J}),m(" Api属性 "),a(C,{title:"Checkbox Attributes",theads:l,bodyData:o}),a(C,{title:"Checkbox Events",theads:t,bodyData:u}),a(C,{title:"Checkbox Slots",theads:s,bodyData:i}),a(C,{title:"CheckboxGroup Attributes",theads:h,bodyData:b}),a(C,{title:"CheckboxGroup Events",theads:t,bodyData:u}),a(C,{title:"CheckboxGroup Slots",theads:k,bodyData:v})],64)}}});export{P as default};
