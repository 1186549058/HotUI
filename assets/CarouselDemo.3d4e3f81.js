let e=document.createElement("style");e.innerHTML=".demonstration[data-v-13b965a9]{padding:10px}.ht-carousel__item h3[data-v-13b965a9]{color:#475669;opacity:.75;line-height:150px;margin:0;text-align:center}.ht-carousel__item[data-v-13b965a9]:nth-child(2n){background-color:#99a9bf}.ht-carousel__item[data-v-13b965a9]:nth-child(2n+1){background-color:#d3dce6}.ht-carousel__item h3[data-v-5e28520e]{color:#475669;opacity:.75;line-height:200px;margin:0;text-align:center}.ht-carousel__item[data-v-5e28520e]:nth-child(2n){background-color:#99a9bf}.ht-carousel__item[data-v-5e28520e]:nth-child(2n+1){background-color:#d3dce6}.text-center[data-v-4ecbf5f8]{text-align:center;padding:20px}.ht-carousel__item h3[data-v-4ecbf5f8]{color:#475669;opacity:.75;line-height:200px;margin:0;text-align:center}.ht-carousel__item[data-v-4ecbf5f8]:nth-child(2n){background-color:#99a9bf}.ht-carousel__item[data-v-4ecbf5f8]:nth-child(2n+1){background-color:#d3dce6}",document.head.appendChild(e);import{g as t,q as n,o as r,c as a,a as l,b as o,w as i,F as c,m as s,r as d,t as u,p as h,f as m,j as p,d as _,h as x}from"./index.6e1d6788.js";const v=e=>(h("data-v-13b965a9"),e=e(),m(),e),f={class:"block text-center"},g=v((()=>l("p",{class:"demonstration"},'当切换的方式为hover时，默认(trigger:"hover")',-1))),y={class:"small justify-center"},b={class:"block text-center",m:"t-4"},k=v((()=>l("p",{class:"demonstration"},"当切换的方式为click时",-1))),I={class:"small justify-center"};var C=t({__name:"CarouselBasic",setup(e){const t=n(0),h=n(0);return(e,n)=>{const m=d("ht-carousel-item"),p=d("ht-carousel");return r(),a(c,null,[l("div",f,[g,o(p,{height:"150px",initialIndex:t.value,"onUpdate:initialIndex":n[0]||(n[0]=e=>t.value=e)},{default:i((()=>[(r(),a(c,null,s(4,(e=>o(m,{key:e},{default:i((()=>[l("h3",y,u(e),1)])),_:2},1024))),64))])),_:1},8,["initialIndex"])]),l("div",b,[k,o(p,{trigger:"click",height:"150px",initialIndex:h.value,"onUpdate:initialIndex":n[1]||(n[1]=e=>h.value=e)},{default:i((()=>[(r(),a(c,null,s(4,(e=>o(m,{key:e},{default:i((()=>[l("h3",I,u(e),1)])),_:2},1024))),64))])),_:1},8,["initialIndex"])])],64)}}});function j(e){e.__sourceCode='<template>\r\n  <div class="block text-center">\r\n    <p class="demonstration">当切换的方式为hover时，默认(trigger:"hover")</p>\r\n    <ht-carousel height="150px" v-model:initialIndex="demo1">\r\n      <ht-carousel-item v-for="item in 4" :key="item">\r\n        <h3 class="small justify-center">{{ item }}</h3>\r\n      </ht-carousel-item>\r\n    </ht-carousel>\r\n  </div>\r\n  <div class="block text-center" m="t-4">\r\n    <p class="demonstration">当切换的方式为click时</p>\r\n    <ht-carousel trigger="click" height="150px" v-model:initialIndex="demo2">\r\n      <ht-carousel-item v-for="item in 4" :key="item">\r\n        <h3 class="small justify-center">{{ item }}</h3>\r\n      </ht-carousel-item>\r\n    </ht-carousel>\r\n  </div>\r\n</template>\r\n\r\n<script lang="ts" setup>\r\nimport { ref } from "vue";\r\n\r\nconst demo1 = ref(0);\r\nconst demo2 = ref(0);\r\n<\/script>\r\n<style scoped>\r\n.demonstration {\r\n  padding: 10px;\r\n}\r\n.ht-carousel__item h3 {\r\n  color: #475669;\r\n  opacity: 0.75;\r\n  line-height: 150px;\r\n  margin: 0;\r\n  text-align: center;\r\n}\r\n\r\n.ht-carousel__item:nth-child(2n) {\r\n  background-color: #99a9bf;\r\n}\r\n\r\n.ht-carousel__item:nth-child(2n + 1) {\r\n  background-color: #d3dce6;\r\n}\r\n</style>',e.__sourceCodeTitle=" 基础用法 "}j(C),C.__scopeId="data-v-13b965a9";const D=l("p",{class:"row"},[_(" 结合使用 "),l("code",null,"ht-carousel"),_(" 和 "),l("code",null,"ht-carousel-item"),_(" 标签就得到了一个走马灯。 每一个页面的内容是完全可定制的，把你想要展示的内容放在 el-carousel-item 标签内。 默认情况下，在鼠标 hover 底部的指示器时就会触发切换。 通过设置 "),l("code",null,"trigger"),_(" 属性为 click，可以达到点击触发的效果。 ")],-1);const U={render:function(e,t){const n=d("desc-component");return r(),p(n,null,{default:i((()=>[D])),_:1})}},w={text:"2xl",justify:"center"};var A=t({__name:"CarouselCard",setup(e){const t=n(1);return(e,n)=>{const h=d("ht-carousel-item"),m=d("ht-carousel");return r(),p(m,{interval:4e3,initialIndex:t.value,"onUpdate:initialIndex":n[0]||(n[0]=e=>t.value=e),type:"card",height:"200px"},{default:i((()=>[(r(),a(c,null,s(6,(e=>o(h,{key:e},{default:i((()=>[l("h3",w,u(e),1)])),_:2},1024))),64))])),_:1},8,["initialIndex"])}}});function T(e){e.__sourceCode='<template>\r\n  <ht-carousel\r\n    :interval="4000"\r\n    v-model:initialIndex="demo1"\r\n    type="card"\r\n    height="200px"\r\n  >\r\n    <ht-carousel-item v-for="item in 6" :key="item">\r\n      <h3 text="2xl" justify="center">{{ item }}</h3>\r\n    </ht-carousel-item>\r\n  </ht-carousel>\r\n</template>\r\n<script lang="ts" setup>\r\nimport { ref } from "vue";\r\n\r\nconst demo1 = ref(1);\r\n<\/script>\r\n  <style scoped>\r\n.ht-carousel__item h3 {\r\n  color: #475669;\r\n  opacity: 0.75;\r\n  line-height: 200px;\r\n  margin: 0;\r\n  text-align: center;\r\n}\r\n\r\n.ht-carousel__item:nth-child(2n) {\r\n  background-color: #99a9bf;\r\n}\r\n\r\n.ht-carousel__item:nth-child(2n + 1) {\r\n  background-color: #d3dce6;\r\n}\r\n</style>',e.__sourceCodeTitle=" 卡片模式 "}T(A),A.__scopeId="data-v-5e28520e";const z=l("p",{class:"row"},[_(" 将 "),l("code",null,"type"),_(" 属性设置为 "),l("code",null,"card"),_(" 即可启用卡片模式。 从交互上来说，卡片模式和一般模式的最大区别在于，卡片模式可以通过直接点击两侧的幻灯片进行切换。 ")],-1);const E={render:function(e,t){const n=d("desc-component");return r(),p(n,null,{default:i((()=>[z])),_:1})}},M=e=>(h("data-v-4ecbf5f8"),e=e(),m(),e),q=M((()=>l("p",{class:"text-center demonstration"},"normal vertical layout",-1))),B={text:"2xl",justify:"center"},F=M((()=>l("p",{class:"text-center demonstration"},"card vertical layout",-1))),H={text:"2xl",justify:"center"};var L=t({__name:"CarouselVertical",setup(e){const t=n(1),h=n(1);return(e,n)=>{const m=d("ht-carousel-item"),p=d("ht-carousel");return r(),a(c,null,[q,o(p,{height:"200px",initialIndex:t.value,"onUpdate:initialIndex":n[0]||(n[0]=e=>t.value=e),direction:"vertical",autoplay:!1},{default:i((()=>[(r(),a(c,null,s(4,(e=>o(m,{key:e},{default:i((()=>[l("h3",B,u(e),1)])),_:2},1024))),64))])),_:1},8,["initialIndex"]),F,o(p,{height:"400px",direction:"vertical",type:"card",autoplay:!1,initialIndex:h.value,"onUpdate:initialIndex":n[1]||(n[1]=e=>h.value=e)},{default:i((()=>[(r(),a(c,null,s(4,(e=>o(m,{key:e},{default:i((()=>[l("h3",H,u(e),1)])),_:2},1024))),64))])),_:1},8,["initialIndex"])],64)}}});function V(e){e.__sourceCode='<template>\r\n  <p class="text-center demonstration">normal vertical layout</p>\r\n  <ht-carousel\r\n    height="200px"\r\n    v-model:initialIndex="demo1"\r\n    direction="vertical"\r\n    :autoplay="false"\r\n  >\r\n    <ht-carousel-item v-for="item in 4" :key="item">\r\n      <h3 text="2xl" justify="center">{{ item }}</h3>\r\n    </ht-carousel-item>\r\n  </ht-carousel>\r\n  <p class="text-center demonstration">card vertical layout</p>\r\n  <ht-carousel\r\n    height="400px"\r\n    direction="vertical"\r\n    type="card"\r\n    :autoplay="false"\r\n    v-model:initialIndex="demo2"\r\n  >\r\n    <ht-carousel-item v-for="item in 4" :key="item">\r\n      <h3 text="2xl" justify="center">{{ item }}</h3>\r\n    </ht-carousel-item>\r\n  </ht-carousel>\r\n</template>\r\n<script lang="ts" setup>\r\nimport { ref } from "vue";\r\n\r\nconst demo1 = ref(1);\r\nconst demo2 = ref(1);\r\n<\/script>\r\n  <style scoped>\r\n.text-center {\r\n  text-align: center;\r\n  padding: 20px;\r\n}\r\n.ht-carousel__item h3 {\r\n  color: #475669;\r\n  opacity: 0.75;\r\n  line-height: 200px;\r\n  margin: 0;\r\n  text-align: center;\r\n}\r\n\r\n.ht-carousel__item:nth-child(2n) {\r\n  background-color: #99a9bf;\r\n}\r\n\r\n.ht-carousel__item:nth-child(2n + 1) {\r\n  background-color: #d3dce6;\r\n}\r\n</style>',e.__sourceCodeTitle=" 垂直排列 "}V(L),L.__scopeId="data-v-4ecbf5f8";const G=l("p",{class:"row"},[_(" 默认情况下，方向 "),l("code",null,"direction"),_(" 为 水平 "),l("code",null,"horizontal。"),_(" 通过设置 "),l("code",null,"direction"),_(" 为 "),l("code",null,"vertical"),_(" 来让走马灯在垂直方向上显示。 ")],-1);const J={render:function(e,t){const n=d("desc-component");return r(),p(n,null,{default:i((()=>[G])),_:1})}},K=l("h1",null,"Carousel 走马灯",-1),N=l("p",null,"在有限空间内，循环播放同一类型的图片、文字等内容",-1);var O=t({__name:"CarouselDemo",setup(e){const t=["属性名","说明","类型","可选值","默认值"],n=[["height","carousel 的高度","string","",""],["initial-index","初始状态激活的幻灯片的索引，从 0 开始","number","","0"],["trigger","指示器的触发方式","string","hover/click","hover"],["autoplay","是否自动切换","boolean","","true"],["interval","自动切换的时间间隔，单位为毫秒\t","number","","3000"],["loop","是否循环显示\t\t","boolean","","true"],["type","carousel 的类型","string","card",""],["direction","展示的方向\t","string","horizontal/vertical","horizontal"]],l=["事件名","说明","回调参数"],i=[["change","幻灯片切换时触发\t","目前激活的幻灯片的索引，原幻灯片的索引"]],s=["方法名","说明","参数"],u=[["setActiveItem","手动切换幻灯片\t\t","需要切换的幻灯片的索引，从 0 开始"],["prev","切换至上一张幻灯片",""],["next","切换至下一张幻灯片",""]];return(e,h)=>{const m=d("Demo"),p=d("Api");return r(),a(c,null,[K,N,x(" 基本使用 "),o(m,{component:C,descComponent:U}),x(" 卡片模式 "),o(m,{component:A,descComponent:E}),x(" 垂直排列 "),o(m,{component:L,descComponent:J}),x(" Api属性 "),o(p,{title:"Carousel Attributes",theads:t,bodyData:n}),x(" 事件 "),o(p,{title:"Carousel Events",theads:l,bodyData:i}),x(" 方法 "),o(p,{title:"Carousel Methods",theads:s,bodyData:u})],64)}}});export{O as default};
