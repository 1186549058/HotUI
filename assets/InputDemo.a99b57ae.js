let e=document.createElement("style");e.innerHTML=".demo-input-size{display:flex;align-items:center}.demo-input-size>div{margin-right:25px}",document.head.appendChild(e);import{g as n,q as t,o,j as l,r,w as a,a as u,d as c,c as d,b as s,F as p,h as i}from"./index.6e1d6788.js";var m=n({__name:"InputBasic",setup(e){const n=t("");return(e,t)=>{const a=r("ht-input");return o(),l(a,{modelValue:n.value,"onUpdate:modelValue":t[0]||(t[0]=e=>n.value=e),placeholder:"Please input"},null,8,["modelValue"])}}});function h(e){e.__sourceCode='<template>\r\n  <ht-input v-model="input"  placeholder="Please input" />\r\n</template>\r\n\r\n<script lang="ts" setup>\r\nimport { ref } from \'vue\'\r\nconst input = ref(\'\')\r\n<\/script>',e.__sourceCodeTitle=" 基础用法 "}h(m);var v=n({__name:"InputDisabled",setup(e){const n=t("");return(e,t)=>{const a=r("ht-input");return o(),l(a,{modelValue:n.value,"onUpdate:modelValue":t[0]||(t[0]=e=>n.value=e),disabled:"",placeholder:"Please input"},null,8,["modelValue"])}}});function f(e){e.__sourceCode='<template>\r\n  <ht-input v-model="input" disabled placeholder="Please input" />\r\n</template>\r\n\r\n<script lang="ts" setup>\r\nimport { ref } from \'vue\'\r\nconst input = ref(\'\')\r\n<\/script>',e.__sourceCodeTitle=" 禁用状态 "}f(v);var _={};const x=u("p",{class:"row"},[c(" 通过"),u("code",null,"disabled"),c("属性指定是否禁用 input 组件 ")],-1);_.render=function(e,n,t,u,c,d){const s=r("desc-component");return o(),l(s,null,{default:a((()=>[x])),_:1})};var g=n({__name:"InputClearable",setup(e){const n=t("");return(e,t)=>{const a=r("ht-input");return o(),l(a,{modelValue:n.value,"onUpdate:modelValue":t[0]||(t[0]=e=>n.value=e),placeholder:"Please input",clearable:""},null,8,["modelValue"])}}});function w(e){e.__sourceCode='<template>\r\n  <ht-input v-model="input" placeholder="Please input" clearable />\r\n</template>\r\n\r\n<script lang="ts" setup>\r\nimport { ref } from \'vue\'\r\nconst input = ref(\'\')\r\n<\/script>',e.__sourceCodeTitle=" 一键清空 "}w(g);var V={};const b=u("p",{class:"row"},[c(" 使用"),u("code",null,"clearable"),c("属性即可得到一个可一键清空的输入框 ")],-1);V.render=function(e,n,t,u,c,d){const s=r("desc-component");return o(),l(s,null,{default:a((()=>[b])),_:1})};var y=n({__name:"InputShowPassword",setup(e){const n=t("");return(e,t)=>{const a=r("ht-input");return o(),l(a,{modelValue:n.value,"onUpdate:modelValue":t[0]||(t[0]=e=>n.value=e),type:"password",placeholder:"Please input password","show-password":""},null,8,["modelValue"])}}});function P(e){e.__sourceCode='<template>\r\n  <ht-input\r\n    v-model="input"\r\n    type="password"\r\n    placeholder="Please input password"\r\n    show-password\r\n  />\r\n</template>\r\n\r\n<script lang="ts" setup>\r\nimport { ref } from \'vue\'\r\nconst input = ref(\'\')\r\n<\/script>',e.__sourceCodeTitle=" 密码框 "}P(y);var C={};const I=u("p",{class:"row"},[c(" 使用"),u("code",null,"show-password"),c("属性即可得到一个可切换显示隐藏的密码框 ")],-1);C.render=function(e,n,t,u,c,d){const s=r("desc-component");return o(),l(s,null,{default:a((()=>[I])),_:1})};var z=n({__name:"InputTextarea",setup(e){const n=t("");return(e,t)=>{const a=r("ht-input");return o(),l(a,{modelValue:n.value,"onUpdate:modelValue":t[0]||(t[0]=e=>n.value=e),rows:2,type:"textarea",placeholder:"Please input"},null,8,["modelValue"])}}});function U(e){e.__sourceCode='<template>\r\n  <ht-input\r\n    v-model="textarea"\r\n    :rows="2"\r\n    type="textarea"\r\n    placeholder="Please input"\r\n  />\r\n</template>\r\n\r\n<script lang="ts" setup>\r\nimport { ref } from \'vue\'\r\nconst textarea = ref(\'\')\r\n<\/script>',e.__sourceCodeTitle=" 文本域 "}U(z);var T={};const F=u("p",{class:"row"},[c(" 用于输入多行文本信息可缩放的输入框。 添加 "),u("code",null,'type="textarea"'),c(" 属性来将 "),u("code",null,"input"),c(" 元素转换为原生的 "),u("code",null,"textarea"),c(" 元素。 ")],-1),D=u("p",{class:"row"},[c(" 文本域高度可通过 "),u("code",null,"rows"),c(" 属性控制 ")],-1);T.render=function(e,n,t,u,c,d){const s=r("desc-component");return o(),l(s,null,{default:a((()=>[F,D])),_:1})};const S={class:"demo-input-size"};var j=n({__name:"InputSize",setup(e){const n=t(""),l=t(""),a=t("");return(e,t)=>{const u=r("ht-input");return o(),d("div",S,[s(u,{modelValue:n.value,"onUpdate:modelValue":t[0]||(t[0]=e=>n.value=e),size:"large",placeholder:"Please Input"},null,8,["modelValue"]),s(u,{modelValue:l.value,"onUpdate:modelValue":t[1]||(t[1]=e=>l.value=e),placeholder:"Please Input"},null,8,["modelValue"]),s(u,{modelValue:a.value,"onUpdate:modelValue":t[2]||(t[2]=e=>a.value=e),size:"small",placeholder:"Please Input"},null,8,["modelValue"])])}}});function A(e){e.__sourceCode='<template>\r\n  <div class="demo-input-size">\r\n    <ht-input v-model="input1" size="large" placeholder="Please Input" />\r\n    <ht-input v-model="input2" placeholder="Please Input" />\r\n    <ht-input v-model="input3" size="small" placeholder="Please Input" />\r\n  </div>\r\n</template>\r\n\r\n<script lang="ts" setup>\r\nimport { ref } from "vue";\r\nconst input1 = ref("");\r\nconst input2 = ref("");\r\nconst input3 = ref("");\r\n<\/script>\r\n<style lang="scss">\r\n    .demo-input-size{\r\n        display: flex;\r\n        align-items: center;\r\n        >div{\r\n            margin-right: 25px;\r\n        }\r\n    }\r\n\r\n</style>',e.__sourceCodeTitle=" 尺寸 "}A(j);var L={};const M=u("p",{class:"row"},[c(" 使用 "),u("code",null,"size"),c(" 属性改变输入框大小。 除了默认大小外，还有另外两个选项： "),u("code",null,"large"),c(", "),u("code",null,"small")],-1);L.render=function(e,n,t,u,c,d){const s=r("desc-component");return o(),l(s,null,{default:a((()=>[M])),_:1})};const q=u("div",{style:{margin:"20px 0"}},null,-1);var B=n({__name:"InputMaxLength",setup(e){const n=t(""),l=t("");return(e,t)=>{const a=r("ht-input");return o(),d(p,null,[s(a,{modelValue:n.value,"onUpdate:modelValue":t[0]||(t[0]=e=>n.value=e),maxlength:"10",placeholder:"Please input","show-word-limit":"",type:"text"},null,8,["modelValue"]),q,s(a,{modelValue:l.value,"onUpdate:modelValue":t[1]||(t[1]=e=>l.value=e),maxlength:"30",placeholder:"Please input","show-word-limit":"",type:"textarea"},null,8,["modelValue"])],64)}}});function E(e){e.__sourceCode='<template>\r\n  <ht-input\r\n    v-model="text"\r\n    maxlength="10"\r\n    placeholder="Please input"\r\n    show-word-limit\r\n    type="text"\r\n  />\r\n  <div style="margin: 20px 0" />\r\n  <ht-input\r\n    v-model="textarea"\r\n    maxlength="30"\r\n    placeholder="Please input"\r\n    show-word-limit\r\n    type="textarea"\r\n  />\r\n</template>\r\n\r\n<script lang="ts" setup>\r\nimport { ref } from \'vue\'\r\nconst text = ref(\'\')\r\nconst textarea = ref(\'\')\r\n<\/script>',e.__sourceCodeTitle=" 输入长度限制 "}E(B);var H={};const J=u("p",{class:"row"},[c(" 使用 "),u("code",null,"maxlength"),c(" 和 "),u("code",null,"minlength"),c(' 属性, 来控制输入内容的最大字数和最小字数。 "字符数"使用JavaScript字符串长度来衡量。 为文本或文本输入类型设置 maxlength prop可以限制输入值的长度。 允许你通过设置 '),u("code",null,"show-word-limit"),c(" 到 "),u("code",null,"true"),c(" 来显示剩余字数。 ")],-1);H.render=function(e,n,t,u,c,d){const s=r("desc-component");return o(),l(s,null,{default:a((()=>[J])),_:1})};var k={__name:"InputDemo",setup(e){const n=["属性名","说明","类型","默认值"],t=[["type","类型","<code>string </code>","text"],["<code>v-model</code>","绑定值","<code>string</code>/<code>number</code> ",""],["maxlength","最大输入长度","<code>string</code>/<code>number</code> ",""],["minlength","原生属性，最小输入长度","<code>number</code> ",""],["show-word-limit","是否显示统计字数, 只在 <code>type</code> 为 'text' 或 'textarea' 的时候生效","<code>boolean</code> ","<code>false</code>"],["placeholder","输入框占位文本","<code>string</code> ",""],["clearable","是否显示清除按钮，只有当 <code>type</code> 不是 textarea时生效","<code>boolean</code> ","false"],["show-password","\t是否显示切换密码图标","<code>boolean</code> ","false"],["disabled","是否禁用","<code>boolean</code> ","false"],["size","输入框尺寸，只在 <code>type</code> 不为 'textarea' 时有效","<code>'large' | 'default' | 'small'</code> ",""],["rows","输入框行数，仅 <code>type</code> 为 'textarea' 时有效","<code>number</code> ","<code>number</code>"],["autocomplete","原生 autocomplete 属性","<code>string</code> ","off"],["readonly","原生  readonly 属性，是否只读","<code>boolean</code> ","false"],["autofocus","原生属性，自动获取焦点","<code>boolean</code> ","false"],["tabindex","输入框的 tabindex","<code>string</code>/<code>number</code> ",""]],l=["事件名","说明","类型"],a=[["blur","当选择器的输入框失去焦点时触发","<code>Function </code>"],["focus","当选择器的输入框获得焦点时触发","<code>Function </code>"],["change","仅当 modelValue 改变时，当输入框失去焦点触发","<code>Function </code>"],["input","在 Input 值改变时触发","<code>Function </code>"],["clear","在点击由 <code>clearable</code> 属性生成的清空按钮时触发","<code>Function </code>"]];return(e,u)=>{const c=r("Demo"),h=r("Api");return o(),d(p,null,[s(c,{component:m}),s(c,{component:v,"desc-component":_}),s(c,{component:g,"desc-component":V}),s(c,{component:y,"desc-component":C}),s(c,{component:z,"desc-component":T}),s(c,{component:j,"desc-component":L}),s(c,{component:B,"desc-component":H}),i(" Api属性 "),s(h,{title:"属性",theads:n,bodyData:t}),i(" 事件 "),s(h,{title:"事件",theads:l,bodyData:a})],64)}}};export{k as default};
